AWSTemplateFormatVersion: '2010-09-09'
Description: API Gateway REST API con VPC Link y Lambda Authorizer

Parameters:
  NlbDns:
    Type: String

  NlbArn:
    Type: String

  AuthorizerLambdaArn:
    Type: String
    Description: ARN del Lambda Authorizer

Resources:

  VpcLink:
    Type: AWS::ApiGateway::VpcLink
    Properties:
      Name: gamer-vpc-link
      TargetArns:
        - !Ref NlbArn

  RestApi:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: gamer-rest-api
      EndpointConfiguration:
        Types:
          - REGIONAL

  Authorizer:
    Type: AWS::ApiGateway::Authorizer
    Properties:
      Name: gamer-lambda-authorizer
      Type: TOKEN
      IdentitySource: method.request.header.Authorization
      RestApiId: !Ref RestApi
      AuthorizerUri: !Sub
        - arn:aws:apigateway:${Region}:lambda:path/2015-03-31/functions/${LambdaArn}/invocations
        - {
            Region: !Ref "AWS::Region",
            LambdaArn: !Ref AuthorizerLambdaArn
          }
  
  #Resource /auth
  AuthResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref RestApi
      ParentId: 
        Fn::GetAtt:
          - RestApi
          - RootResourceId
      PathPart: auth

  #Resource /auth/changepassword post
  ChangePasswordResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref RestApi
      ParentId: !Ref AuthResource
      PathPart: changepassword
  
  ChangePasswordPostMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref RestApi
      ResourceId: !Ref ChangePasswordResource
      HttpMethod: POST
      AuthorizationType: NONE #Colocar CUSTOM si se va a usar la Lambda Auth
      # AuthorizationId: !Ref Authorizer
      RequestParameters:
        method.request.header.Authorization: true
      Integration:
        Type: HTTP
        IntegrationHttpMethod: POST
        Uri: !Sub "http://${NlbDns}:5001/auth/changepassword"
        ConnectionType: VPC_LINK
        ConnectionId: !Ref VpcLink
        PassthroughBehavior: WHEN_NO_MATCH
        RequestParameters:
          integration.request.header.Authorization: method.request.header.Authorization
        IntegrationResponses:
          - StatusCode: 200
            ResponseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
      MethodResponses:
        - StatusCode: 200
          ResponseParameters:
              method.response.header.Access-Control-Allow-Origin: true
  
  ChangePasswordOptionsMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref RestApi
      ResourceId: !Ref ChangePasswordResource
      HttpMethod: OPTIONS
      AuthorizationType: NONE
      Integration:
        Type: MOCK
        RequestTemplates:
          application/json: '{"statusCode": 200}'
        IntegrationResponses:
          - StatusCode: 200
            ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,Authorization'"
              method.response.header.Access-Control-Allow-Methods: "'POST,OPTIONS'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
      MethodResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true
            method.response.header.Access-Control-Allow-Origin: true

  #Resource /auth/deactivateuser post
  DeactivateUserResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref RestApi
      ParentId: !Ref AuthResource
      PathPart: deactivateuser
  
  DeactivateUserPostMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref RestApi
      ResourceId: !Ref DeactivateUserResource
      HttpMethod: POST
      AuthorizationType: NONE #Colocar CUSTOM si se va a usar la Lambda Auth
      # AuthorizationId: !Ref Authorizer
      RequestParameters:
        method.request.header.Authorization: true
      Integration:
        Type: HTTP
        IntegrationHttpMethod: POST
        Uri: !Sub "http://${NlbDns}:5001/auth/deactivateuser"
        ConnectionType: VPC_LINK
        ConnectionId: !Ref VpcLink
        PassthroughBehavior: WHEN_NO_MATCH
        RequestParameters:
          integration.request.header.Authorization: method.request.header.Authorization
        IntegrationResponses:
          - StatusCode: 200
            ResponseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
      MethodResponses:
        - StatusCode: 200
          ResponseParameters:
              method.response.header.Access-Control-Allow-Origin: true
  
  DeactivateUserOptionsMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref RestApi
      ResourceId: !Ref DeactivateUserResource
      HttpMethod: OPTIONS
      AuthorizationType: NONE
      Integration:
        Type: MOCK
        RequestTemplates:
          application/json: '{"statusCode": 200}'
        IntegrationResponses:
          - StatusCode: 200
            ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,Authorization'"
              method.response.header.Access-Control-Allow-Methods: "'POST,OPTIONS'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
      MethodResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true
            method.response.header.Access-Control-Allow-Origin: true

  #Resource /auth/login post
  LoginResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref RestApi
      ParentId: !Ref AuthResource
      PathPart: login

  LoginPostMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref RestApi
      ResourceId: !Ref LoginResource
      HttpMethod: POST
      AuthorizationType: NONE #Colocar CUSTOM si se va a usar la Lambda Auth
      # AuthorizationId: !Ref Authorizer
      Integration:
        Type: HTTP
        IntegrationHttpMethod: POST
        Uri: !Sub "http://${NlbDns}:5001/auth/login"
        ConnectionType: VPC_LINK
        ConnectionId: !Ref VpcLink
        PassthroughBehavior: WHEN_NO_MATCH
        IntegrationResponses:
          - StatusCode: 200
            ResponseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
      MethodResponses:
        - StatusCode: 200
          ResponseParameters:
              method.response.header.Access-Control-Allow-Origin: true
  
  LoginOptionsMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref RestApi
      ResourceId: !Ref LoginResource
      HttpMethod: OPTIONS
      AuthorizationType: NONE
      Integration:
        Type: MOCK
        RequestTemplates:
          application/json: '{"statusCode": 200}'
        IntegrationResponses:
          - StatusCode: 200
            ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,Authorization'"
              method.response.header.Access-Control-Allow-Methods: "'POST,OPTIONS'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
      MethodResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true
            method.response.header.Access-Control-Allow-Origin: true

  #Resource /auth/register post
  RegisterResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref RestApi
      ParentId: !Ref AuthResource
      PathPart: register
  
  RegisterPostMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref RestApi
      ResourceId: !Ref RegisterResource
      HttpMethod: POST
      AuthorizationType: NONE #Colocar CUSTOM si se va a usar la Lambda Auth
      # AuthorizationId: !Ref Authorizer
      Integration:
        Type: HTTP
        IntegrationHttpMethod: POST
        Uri: !Sub "http://${NlbDns}:5001/auth/register"
        ConnectionType: VPC_LINK
        ConnectionId: !Ref VpcLink
        PassthroughBehavior: WHEN_NO_MATCH
        IntegrationResponses:
          - StatusCode: 200
            ResponseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
      MethodResponses:
        - StatusCode: 200
          ResponseParameters:
              method.response.header.Access-Control-Allow-Origin: true
  
  RegisterOptionsMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref RestApi
      ResourceId: !Ref RegisterResource
      HttpMethod: OPTIONS
      AuthorizationType: NONE
      Integration:
        Type: MOCK
        RequestTemplates:
          application/json: '{"statusCode": 200}'
        IntegrationResponses:
          - StatusCode: 200
            ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,Authorization'"
              method.response.header.Access-Control-Allow-Methods: "'POST,OPTIONS'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
      MethodResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true
            method.response.header.Access-Control-Allow-Origin: true

  #Resource /orders post
  OrdersResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref RestApi
      ParentId: 
        Fn::GetAtt:
          - RestApi
          - RootResourceId
      PathPart: orders
  
  OrdersPostMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref RestApi
      ResourceId: !Ref OrdersResource
      HttpMethod: POST
      AuthorizationType: NONE #Colocar CUSTOM si se va a usar la Lambda Auth
      # AuthorizationId: !Ref Authorizer
      RequestParameters:
        method.request.header.Authorization: true
      Integration:
        Type: HTTP
        IntegrationHttpMethod: POST
        Uri: !Sub "http://${NlbDns}:5002/orders"
        ConnectionType: VPC_LINK
        ConnectionId: !Ref VpcLink
        PassthroughBehavior: WHEN_NO_MATCH
        RequestParameters:
          integration.request.header.Authorization: method.request.header.Authorization
        IntegrationResponses:
          - StatusCode: 200
            ResponseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
      MethodResponses:
        - StatusCode: 200
          ResponseParameters:
              method.response.header.Access-Control-Allow-Origin: true
  
  OrdersOptionsMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref RestApi
      ResourceId: !Ref OrdersResource
      HttpMethod: OPTIONS
      AuthorizationType: NONE
      Integration:
        Type: MOCK
        RequestTemplates:
          application/json: '{"statusCode": 200}'
        IntegrationResponses:
          - StatusCode: 200
            ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,Authorization'"
              method.response.header.Access-Control-Allow-Methods: "'POST,OPTIONS'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
      MethodResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true
            method.response.header.Access-Control-Allow-Origin: true

  #Resource /orders/{user_id} get
  OrdersUserResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref RestApi
      ParentId: !Ref OrdersResource
      PathPart: '{user_id}'
  
  OrdersUserGetMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref RestApi
      ResourceId: !Ref OrdersUserResource
      HttpMethod: GET
      AuthorizationType: NONE #Colocar CUSTOM si se va a usar la Lambda Auth
      # AuthorizationId: !Ref Authorizer
      RequestParameters:
        method.request.path.user_id: true
        method.request.header.Authorization: true
      Integration:
        Type: HTTP
        IntegrationHttpMethod: GET
        Uri: !Sub "http://${NlbDns}:5002/orders/{user_id}"
        ConnectionType: VPC_LINK
        ConnectionId: !Ref VpcLink
        PassthroughBehavior: WHEN_NO_MATCH
        RequestParameters:
          integration.request.path.user_id: method.request.path.user_id
          integration.request.header.Authorization: method.request.header.Authorization
        IntegrationResponses:
          - StatusCode: 200
            ResponseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
      MethodResponses:
        - StatusCode: 200
          ResponseParameters:
              method.response.header.Access-Control-Allow-Origin: true
  
  OrdersUsersOptionsMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref RestApi
      ResourceId: !Ref OrdersUserResource
      HttpMethod: OPTIONS
      AuthorizationType: NONE
      Integration:
        Type: MOCK
        RequestTemplates:
          application/json: '{"statusCode": 200}'
        IntegrationResponses:
          - StatusCode: 200
            ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,Authorization'"
              method.response.header.Access-Control-Allow-Methods: "'GET,OPTIONS'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
      MethodResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true
            method.response.header.Access-Control-Allow-Origin: true

  #Resource /orders/detail
  DetailResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref RestApi
      ParentId: !Ref OrdersResource
      PathPart: detail

  #Resource /orders/detail/{order_id} get
  OrderIdResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref RestApi
      ParentId: !Ref DetailResource
      PathPart: '{order_id}'

  OrdersIdGetMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref RestApi
      ResourceId: !Ref OrderIdResource
      HttpMethod: GET
      AuthorizationType: NONE #Colocar CUSTOM si se va a usar la Lambda Auth
      # AuthorizationId: !Ref Authorizer
      RequestParameters:
        method.request.path.order_id: true
        method.request.header.Authorization: true
      Integration:
        Type: HTTP
        IntegrationHttpMethod: GET
        Uri: !Sub "http://${NlbDns}:5002/orders/detail/{order_id}"
        ConnectionType: VPC_LINK
        ConnectionId: !Ref VpcLink
        PassthroughBehavior: WHEN_NO_MATCH
        RequestParameters:
          integration.request.path.order_id: method.request.path.order_id
          integration.request.header.Authorization: method.request.header.Authorization
        IntegrationResponses:
          - StatusCode: 200
            ResponseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
      MethodResponses:
        - StatusCode: 200
          ResponseParameters:
              method.response.header.Access-Control-Allow-Origin: true
  
  OrdersIdOptionsMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref RestApi
      ResourceId: !Ref OrderIdResource
      HttpMethod: OPTIONS
      AuthorizationType: NONE
      Integration:
        Type: MOCK
        RequestTemplates:
          application/json: '{"statusCode": 200}'
        IntegrationResponses:
          - StatusCode: 200
            ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,Authorization'"
              method.response.header.Access-Control-Allow-Methods: "'GET,OPTIONS'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
      MethodResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true
            method.response.header.Access-Control-Allow-Origin: true
  
  #Resource /products
  ProductsResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref RestApi
      ParentId: 
        Fn::GetAtt:
          - RestApi
          - RootResourceId
      PathPart: products
  
  #Resource /products/{product_id} get
  ProductIdResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref RestApi
      ParentId: !Ref ProductsResource
      PathPart: '{product_id}'
  
  ProductIdGetMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref RestApi
      ResourceId: !Ref ProductIdResource
      HttpMethod: GET
      AuthorizationType: NONE #Colocar CUSTOM si se va a usar la Lambda Auth
      # AuthorizationId: !Ref Authorizer
      RequestParameters:
        method.request.path.product_id: true
        method.request.header.Authorization: true
      Integration:
        Type: HTTP
        IntegrationHttpMethod: GET
        Uri: !Sub "http://${NlbDns}:5003/products/{product_id}"
        ConnectionType: VPC_LINK
        ConnectionId: !Ref VpcLink
        PassthroughBehavior: WHEN_NO_MATCH
        RequestParameters:
          integration.request.path.product_id: method.request.path.product_id
          integration.request.header.Authorization: method.request.header.Authorization
        IntegrationResponses:
          - StatusCode: 200
            ResponseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
      MethodResponses:
        - StatusCode: 200
          ResponseParameters:
              method.response.header.Access-Control-Allow-Origin: true
  
  ProductIdOptionsMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref RestApi
      ResourceId: !Ref ProductIdResource
      HttpMethod: OPTIONS
      AuthorizationType: NONE
      Integration:
        Type: MOCK
        RequestTemplates:
          application/json: '{"statusCode": 200}'
        IntegrationResponses:
          - StatusCode: 200
            ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,Authorization'"
              method.response.header.Access-Control-Allow-Methods: "'GET,OPTIONS'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
      MethodResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true
            method.response.header.Access-Control-Allow-Origin: true

  #Resource /products/coins get
  CoinsResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref RestApi
      ParentId: !Ref ProductsResource
      PathPart: coins
  
  CoinsGetMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref RestApi
      ResourceId: !Ref CoinsResource
      HttpMethod: GET
      AuthorizationType: NONE #Colocar CUSTOM si se va a usar la Lambda Auth
      # AuthorizationId: !Ref Authorizer
      RequestParameters:
        method.request.header.Authorization: true
      Integration:
        Type: HTTP
        IntegrationHttpMethod: GET
        Uri: !Sub "http://${NlbDns}:5003/products/coins"
        ConnectionType: VPC_LINK
        ConnectionId: !Ref VpcLink
        PassthroughBehavior: WHEN_NO_MATCH
        RequestParameters:
          integration.request.header.Authorization: method.request.header.Authorization
        IntegrationResponses:
          - StatusCode: 200
            ResponseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
      MethodResponses:
        - StatusCode: 200
          ResponseParameters:
              method.response.header.Access-Control-Allow-Origin: true
  
  OrdersOptionsMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref RestApi
      ResourceId: !Ref CoinsResource
      HttpMethod: OPTIONS
      AuthorizationType: NONE
      Integration:
        Type: MOCK
        RequestTemplates:
          application/json: '{"statusCode": 200}'
        IntegrationResponses:
          - StatusCode: 200
            ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,Authorization'"
              method.response.header.Access-Control-Allow-Methods: "'GET,OPTIONS'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
      MethodResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true
            method.response.header.Access-Control-Allow-Origin: true

  #Resource /products/coins/{videogame_name} get
  GameNameResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref RestApi
      ParentId: !Ref CoinsResource
      PathPart: '{videogame_name}'

  GameNameGetMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref RestApi
      ResourceId: !Ref GameNameResource
      HttpMethod: GET
      AuthorizationType: NONE #Colocar CUSTOM si se va a usar la Lambda Auth
      # AuthorizationId: !Ref Authorizer
      RequestParameters:
        method.request.path.videogame_name: true
        method.request.header.Authorization: true
      Integration:
        Type: HTTP
        IntegrationHttpMethod: GET
        Uri: !Sub "http://${NlbDns}:5003/products/coins/{videogame_name}"
        ConnectionType: VPC_LINK
        ConnectionId: !Ref VpcLink
        PassthroughBehavior: WHEN_NO_MATCH
        RequestParameters:
          integration.request.path.videogame_name: method.request.path.videogame_name
          integration.request.header.Authorization: method.request.header.Authorization
        IntegrationResponses:
          - StatusCode: 200
            ResponseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
      MethodResponses:
        - StatusCode: 200
          ResponseParameters:
              method.response.header.Access-Control-Allow-Origin: true
  
  GameNameOptionsMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref RestApi
      ResourceId: !Ref GameNameResource
      HttpMethod: OPTIONS
      AuthorizationType: NONE
      Integration:
        Type: MOCK
        RequestTemplates:
          application/json: '{"statusCode": 200}'
        IntegrationResponses:
          - StatusCode: 200
            ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,Authorization'"
              method.response.header.Access-Control-Allow-Methods: "'GET,OPTIONS'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
      MethodResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true
            method.response.header.Access-Control-Allow-Origin: true

  #Resource /products/coins/games-list get
  GamesListResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref RestApi
      ParentId: !Ref CoinsResource
      PathPart: games-list
  
  GamesListGetMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref RestApi
      ResourceId: !Ref GamesListResource
      HttpMethod: GET
      AuthorizationType: NONE #Colocar CUSTOM si se va a usar la Lambda Auth
      # AuthorizationId: !Ref Authorizer
      RequestParameters:
        method.request.header.Authorization: true
      Integration:
        Type: HTTP
        IntegrationHttpMethod: GET
        Uri: !Sub "http://${NlbDns}:5003/products/coins/gameslist"
        ConnectionType: VPC_LINK
        ConnectionId: !Ref VpcLink
        PassthroughBehavior: WHEN_NO_MATCH
        RequestParameters:
          integration.request.header.Authorization: method.request.header.Authorization
        IntegrationResponses:
          - StatusCode: 200
            ResponseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
      MethodResponses:
        - StatusCode: 200
          ResponseParameters:
              method.response.header.Access-Control-Allow-Origin: true
  
  GamesListOptionsMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref RestApi
      ResourceId: !Ref GamesListResource
      HttpMethod: OPTIONS
      AuthorizationType: NONE
      Integration:
        Type: MOCK
        RequestTemplates:
          application/json: '{"statusCode": 200}'
        IntegrationResponses:
          - StatusCode: 200
            ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,Authorization'"
              method.response.header.Access-Control-Allow-Methods: "'GET,OPTIONS'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
      MethodResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true
            method.response.header.Access-Control-Allow-Origin: true

  #Resource /products/videogames get
  VideogamesResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref RestApi
      ParentId: !Ref ProductsResource
      PathPart: videogames
      
  VideogamesGetMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref RestApi
      ResourceId: !Ref VideogamesResource
      HttpMethod: GET
      AuthorizationType: NONE #Colocar CUSTOM si se va a usar la Lambda Auth
      # AuthorizationId: !Ref Authorizer
      RequestParameters:
        method.request.header.Authorization: true
      Integration:
        Type: HTTP
        IntegrationHttpMethod: GET
        Uri: !Sub "http://${NlbDns}:5003/products/videogames"
        ConnectionType: VPC_LINK
        ConnectionId: !Ref VpcLink
        PassthroughBehavior: WHEN_NO_MATCH
        RequestParameters:
          integration.request.header.Authorization: method.request.header.Authorization
        IntegrationResponses:
          - StatusCode: 200
            ResponseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
      MethodResponses:
        - StatusCode: 200
          ResponseParameters:
              method.response.header.Access-Control-Allow-Origin: true
  
  GamesListOptionsMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref RestApi
      ResourceId: !Ref VideogamesResource
      HttpMethod: OPTIONS
      AuthorizationType: NONE
      Integration:
        Type: MOCK
        RequestTemplates:
          application/json: '{"statusCode": 200}'
        IntegrationResponses:
          - StatusCode: 200
            ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,Authorization'"
              method.response.header.Access-Control-Allow-Methods: "'GET,OPTIONS'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
      MethodResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true
            method.response.header.Access-Control-Allow-Origin: true

  #Resource /shoppingcart post
  CartResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref RestApi
      ParentId: 
        Fn::GetAtt:
          - RestApi
          - RootResourceId
      PathPart: shoppingcart
  #Resource /shoppingcart/update post

  #Resource /users
  UsersResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref RestApi
      ParentId: 
        Fn::GetAtt:
          - RestApi
          - RootResourceId
      PathPart: users
  #Resource /users/{user_id} get

  #Resource /wallet
  WalletResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref RestApi
      ParentId: 
        Fn::GetAtt:
          - RestApi
          - RootResourceId
      PathPart: wallet
  #Resource /wallet/{user_id} get
  WalletUserIdResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref RestApi
      ParentId: !Ref WalletResource
      PathPart: '{user_id}'

  #Resource /wallet/{user_id}/add post
  WalletAddResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref RestApi
      ParentId: !Ref WalletUserIdResource
      PathPart: add

  #Resource /wallet/{user_id}/deduct post
  WalletDeductResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref RestApi
      ParentId: !Ref WalletUserIdResource
      PathPart: deduct

  ApiDeployment:
    Type: AWS::ApiGateway::Deployment
    DependsOn: 
      - VideogamesGetMethod
    Properties:
      RestApiId: !Ref RestApi
      StageName: prod
  
  LambdaPermissionForApiGateway:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref AuthorizerLambdaArn
      Principal: apigateway.amazonaws.com

Outputs:
  RestApiId:
    Value: !Ref RestApi

  ApiEndpoint:
    Description: URL publica del API Gateway
    Value: !Sub "https://${RestApi}.execute-api.${AWS::Region}.amazonaws.com/prod/"
